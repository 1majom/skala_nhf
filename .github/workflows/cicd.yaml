name: Pipeline

on:
  push:
    branches: [ "cicd_test" ]

env:
  FORCE_BUILD: true

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      menu: ${{ steps.filter.outputs.menu }}
      waiter: ${{ steps.filter.outputs.waiter }}
      chef: ${{ steps.filter.outputs.chef }}
    steps:
    - uses: actions/checkout@v4
    - name: Debug Environment
      run: |
        echo "FORCE_BUILD from env: ${{ env.FORCE_BUILD }}"
        echo "FORCE_BUILD directly: $FORCE_BUILD"
        echo "All environment variables:"
        env
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          menu:
            - 'src/menu/**'
          waiter:
            - 'src/waiter/**'
          chef:
            - 'src/chef/**'

  build-menu:
    needs: check-changes
    if: needs.check-changes.outputs.menu == 'true' || 0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.AZURE_ACR_URL }}
        username: ${{ secrets.AZURE_ACR_USERNAME }}
        password: ${{ secrets.AZURE_ACR_PASSWORD }}
    - name: Set build version
      id: build_version
      run: |
        echo "VERSION=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

    - name: Build and push Menu service
      uses: docker/build-push-action@v5
      with:
        context: ./src/menu
        push: true
        tags: |
          ${{ secrets.AZURE_ACR_URL }}/menu:latest
          ${{ secrets.AZURE_ACR_URL }}/menu:${{ steps.build_version.outputs.VERSION }}

  build-waiter:
    needs: check-changes
    if: needs.check-changes.outputs.waiter == 'true' || 1
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.AZURE_ACR_URL }}
        username: ${{ secrets.AZURE_ACR_USERNAME }}
        password: ${{ secrets.AZURE_ACR_PASSWORD }}
    - name: Set build version
      id: build_version
      run: |
        echo "VERSION=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

    - name: Build and push Menu service
      uses: docker/build-push-action@v5
      with:
        context: ./src/waiter
        push: true
        tags: |
          ${{ secrets.AZURE_ACR_URL }}/waiter:latest
          ${{ secrets.AZURE_ACR_URL }}/waiter:${{ steps.build_version.outputs.VERSION }}

  build-chef:
    needs: check-changes
    if: needs.check-changes.outputs.chef == 'true' || 0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.AZURE_ACR_URL }}
        username: ${{ secrets.AZURE_ACR_USERNAME }}
        password: ${{ secrets.AZURE_ACR_PASSWORD }}
    - name: Set build version
      id: build_version
      run: |
        echo "VERSION=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

    - name: Build and push Menu service
      uses: docker/build-push-action@v5
      with:
        context: ./src/chef
        push: true
        tags: |
          ${{ secrets.AZURE_ACR_URL }}/chef:latest
          ${{ secrets.AZURE_ACR_URL }}/chef:${{ steps.build_version.outputs.VERSION }}

  deploy:
    needs: [check-changes, build-menu, build-waiter, build-chef]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Helm
      uses: azure/setup-helm@v3
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    - name: Configure Kubernetes to connect to Minikube
      run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONF }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl config set clusters.minikube.server https://${{ secrets.LOCALKUBEIP }}:8443
          kubectl config use-context minikube
          kubectl cluster-info || exit 1
    - name: Create ACR Secret
      run: |
        kubectl create secret docker-registry acr-secret \
          --docker-server=${{ secrets.AZURE_ACR_URL }} \
          --docker-username=${{ secrets.AZURE_ACR_USERNAME }} \
          --docker-password=${{ secrets.AZURE_ACR_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -
    - name: Deploy to Kubernetes
      run: |
        VERSION=${{ steps.build_version.outputs.VERSION }}
        if helm list | grep -q "restaurant"; then
          helm upgrade restaurant ./src/restaurant \
          --set menu.image.tag=$VERSION \
          --set waiter.image.tag=$VERSION \
          --set chef.image.tag=$VERSION \
        else
          helm install restaurant ./src/restaurant \
            --set menu.image.tag=latest \
            --set waiter.image.tag=latest \
            --set chef.image.tag=latest
        fi